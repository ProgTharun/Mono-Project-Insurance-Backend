using InsurancePolicy.DTOs;
using InsurancePolicy.Helpers;
using InsurancePolicy.Models;
using InsurancePolicy.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;

[Route("api/[controller]")]
[ApiController]
public class EmployeeController : ControllerBase
{
    private readonly IEmployeeService _service;

    public EmployeeController(IEmployeeService service)
    {
        _service = service;
    }

    [HttpGet, Authorize(Roles = "Admin")]
        public IActionResult GetAll([FromQuery] PageParameters pageParameters)
        {
        var customers = _service.GetAllPaginated(pageParameters);

            // Add pagination metadata to headers
            Response.Headers.Add("X-Total-Count", customers.TotalCount.ToString());
            Response.Headers.Add("X-Page-Size", customers.PageSize.ToString());
            Response.Headers.Add("X-Current-Page", customers.CurrentPage.ToString());
            Response.Headers.Add("X-Total-Pages", customers.TotalPages.ToString());
            Response.Headers.Add("X-Has-Next", customers.HasNext.ToString());
            Response.Headers.Add("X-Has-Previous", customers.HasPrevious.ToString());

            // Return the customers in the response body
            return Ok(customers);
        }

    [HttpGet("count")]
    public IActionResult GetCount()
    {
        var count=_service.GetTotalCount();
        return Ok(new { count });   
    }
    [HttpPut("activate"), Authorize(Roles = "Admin")]
    public IActionResult Activate(Guid id)
    {
        _service.Activate(id);
        return Ok(id);
    }
    [HttpGet("{id}")]
    public IActionResult Get(Guid id)
    {
        var employee = _service.GetById(id);
        return Ok(employee);
    }

    [HttpPost]
    public async Task<IActionResult> AddAsync(EmployeeRequestDto employeeRequestDto)
    {
        if (!ModelState.IsValid)
        {
            var errors = string.Join("; ", ModelState.Values
                .SelectMany(v => v.Errors)
                .Select(e => e.ErrorMessage));
            throw new ValidationException($"{errors}");
        }
        var newEmployeeId = _service.Add(employeeRequestDto);
        var subject = "Account Created - e-Insurance";
        var body = $@"
        <p>Dear {employeeRequestDto.EmployeeFirstName},</p>
        <p>Your account has been created successfully.</p>
        <p>The below are your Credentials generated by company. Use this to Login into our website.</p>
        <p>Your current Username is: <b>{employeeRequestDto.UserName}</b></p>
        <p>Your current Password is: <b>Employee@123</b></p>
        <p>If you wish to change your password, please change it after login,in the Profile Section.</p>
        <p>Looking forward to working with you. :) </p>
        <p>Best regards,<br/>e-Insurance Team</p> ";

        // Send the email
        var emailService = new EmailService();
        await emailService.SendEmailAsync(employeeRequestDto.Email, subject, body);
        return Ok(new { EmployeeId = newEmployeeId, Message = "Employee added successfully" });
        

    }
    [HttpPut("{id}"), Authorize(Roles = "Admin")]
    public IActionResult UpdateSalary(Guid id,double salary)
    {
        _service.UpdateSalary(id,salary);
        return Ok(new {Message = "Employee updated successfully" });
    }

    [HttpPut]
    public IActionResult Modify(EmployeeRequestDto employeeRequestDto)
    {
        _service.Update(employeeRequestDto);
        return Ok(new { Message = "Employee updated successfully" });
    }

    [HttpDelete("{id}"), Authorize(Roles = "Admin")]
    public IActionResult Delete(Guid id)
    {
        _service.Delete(id);
        return Ok(new { Message = "Employee deleted successfully" });
    }
    [HttpPut("Profile")]
    public IActionResult UpdateUsername(EmployeeRequestDto employeeRequestDto)
    {
        // Call the Update method in the service with the full DTO
        _service.UpdateUsername(employeeRequestDto);

        return Ok(new { Message = "Username updated successfully." });
    }
}
