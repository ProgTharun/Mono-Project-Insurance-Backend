using InsurancePolicy.DTOs;
using InsurancePolicy.Helpers;
using InsurancePolicy.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;

namespace InsurancePolicy.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CustomerController : ControllerBase
    {
        private readonly ICustomerService _service;

        public CustomerController(ICustomerService service)
        {
            _service = service;
        }
        [HttpGet("agent/{agentId}/customers"), Authorize(Roles = "Agent")]
        public IActionResult GetCustomersByAgentPaginated(Guid agentId, [FromQuery] PageParameters pageParameters)
        {
            var customers = _service.GetCustomersByAgentIdPaginated(agentId, pageParameters);

            // Add pagination metadata to headers
            Response.Headers.Add("X-Total-Count", customers.TotalCount.ToString());
            Response.Headers.Add("X-Page-Size", customers.PageSize.ToString());
            Response.Headers.Add("X-Current-Page", customers.CurrentPage.ToString());
            Response.Headers.Add("X-Total-Pages", customers.TotalPages.ToString());
            Response.Headers.Add("X-Has-Next", customers.HasNext.ToString());
            Response.Headers.Add("X-Has-Previous", customers.HasPrevious.ToString());

            // Return the paginated customers
            return Ok(customers);
        }
        [HttpGet("totalCustomers")]
        public IActionResult GetTotalCustomers()
        {
            var count = _service.GetCustomersCount();
            return Ok(new { count });
        }

        [HttpGet]
        public IActionResult GetAll([FromQuery] PageParameters pageParameters)
        {
            var customers = _service.GetAllPaginated(pageParameters);

            // Add pagination metadata to headers
            Response.Headers.Add("X-Total-Count", customers.TotalCount.ToString());
            Response.Headers.Add("X-Page-Size", customers.PageSize.ToString());
            Response.Headers.Add("X-Current-Page", customers.CurrentPage.ToString());
            Response.Headers.Add("X-Total-Pages", customers.TotalPages.ToString());
            Response.Headers.Add("X-Has-Next", customers.HasNext.ToString());
            Response.Headers.Add("X-Has-Previous", customers.HasPrevious.ToString());

            // Return the customers in the response body
            return Ok(customers);
        }

        [HttpGet("{id}"), Authorize(Roles = "Admin,Employee,Customer")]
        public IActionResult Get(Guid id)
        {
            var customer = _service.GetById(id);
            return Ok(customer);
        }

        [HttpPost]
        public async Task<IActionResult> AddAsync(CustomerRequestDto customerRequestDto)
        {
            var newCustomerId = _service.Add(customerRequestDto);
            var subject = "Account Created - e-Insurance";
            var body = $@"
            <p>Dear {customerRequestDto.CustomerFirstName},</p>
            <p>Your account has been created successfully.</p>
            <p>The below are your Credentials generated by company. Use this to Login into our website.</p>
            <p>Your current Username is: <b>{customerRequestDto.UserName}</b></p>
            <p>Your current Password is: <b>{customerRequestDto.Password}</b></p>
            <p>If you wish to change your password, please change it after login,in the Profile Section.</p>
            <p>Looking forward to working with you. :) </p>
            <p>Best regards,<br/>e-Insurance Team</p> ";

            // Send the email
            var emailService = new EmailService();
            await emailService.SendEmailAsync(customerRequestDto.Email, subject, body);

            return Ok(new { CustomerId = newCustomerId, Message = "Customer added successfully." });
        }
        

        [HttpPut]
        public IActionResult Modify(CustomerRequestDto customerRequestDto)
        {
            _service.Update(customerRequestDto);
            return Ok(new { Message = "Customer updated successfully." });
        }
        
        [HttpDelete("{id}")]
        public IActionResult Delete(Guid id)
        {
            _service.Delete(id);
            return Ok("Deleted Successfully!");
        }
        [HttpPut("Profile")]
        public IActionResult UpdateUsername(CustomerRequestDto customerRequestDto)
        {
            // Call the Update method in the service with the full DTO
            _service.UpdateUsername(customerRequestDto);

            return Ok(new { Message = "Username updated successfully." });
        }
    }

}
